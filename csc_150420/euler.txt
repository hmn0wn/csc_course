
import java.util.Scanner;
import java.util.Stack;

class Main {
    int[][] graph;
    String path = "";
    Stack stack = new Stack();
    private int[] vis;

    public int deg(int v)
    {
        int deg = 0;
        for (int i = 0; i < graph.length; i++)
            deg += graph[v][i];
        return deg;
    }

    public void FindEuPath(int v)
    {
        stack.push(v);
        while (!stack.empty()) {
            Integer ver = (Integer) stack.peek();
            if (deg(ver) == 0) {
                path += ver + 1 + " ";
                stack.pop();
            } else {
                for (int i = 0; i < graph.length; i++) {
                    if (graph[ver][i] > 0) {
                        graph[ver][i] -= 1;
                        graph[i][ver] -= 1;
                        stack.push(i);
                        break;
                    }
                }
            }
        }
    }

    public void explore(int u, int[][] g) {
        this.vis[u] = 1;

        for (int i = 0; i < g.length; i++) {
            if (g[u][i] >= 1 || g[i][u] >= 1) {
                if (this.vis[i] != 1) {
                    this.explore(i, g);
                }
            }
        }

    }

    public int dfs(int[][] g) {

        int ccum = 0;

        for (int i = 0; i < g.length; i++) {
            if (this.vis[i] == 0) {
                this.explore(i, g);

                ccum += 1;
            }
        }
        return ccum;

    }

    public static void main(String[] args)
    {
        Main Euler = new Main();

        Scanner s = new Scanner(System.in);

        int n = s.nextInt();
        int m = s.nextInt();
        Euler.graph = new int[n][n];

        for (int i = 0; i < m; i++) {
            int a = s.nextInt() - 1;
            int b = s.nextInt() - 1;
            Euler.graph[a][b] += 1;
            Euler.graph[b][a] += 1;
        }

        int a = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                a += Euler.graph[i][j];
            }
            if (a % 2 == 1) {
                System.out.print("NONE");
                return;
            }
            a = 0;
        }
        Euler.vis = new int[n];
        for (int i = 0; i < n; i++)
            Euler.vis[i] = 0;
        if (Euler.dfs(Euler.graph) > 1) {
            System.out.print("NONE");
            return;
        }
        Euler.FindEuPath(0);
        System.out.print(Euler.path.substring(2));
    }
}